services:
  keycloak-db:
    image: postgres:latest
    container_name: keycloak-db
    environment:
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASS}
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
    expose:
      - "${KEYCLOAK_DB_PORT}"
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KEYCLOAK_DB_USER} -d ${KEYCLOAK_DB_NAME}"]
      interval: 10s
      retries: 5
    networks:
      - app_network
    profiles:
      - data
      - keycloak



  catalog-db:
    image: postgres:latest
    container_name: catalog-db
    environment:
      POSTGRES_USER: ${CATALOG_DB_USER}
      POSTGRES_PASSWORD: ${CATALOG_DB_PASS}
      POSTGRES_DB: ${CATALOG_DB_NAME}
    ports:
      - "${CATALOG_DB_PORT_EXTERNAL}:${CATALOG_DB_PORT_INTERNAL}"
    volumes:
      - catalogdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CATALOG_DB_USER} -d ${CATALOG_DB_NAME}"]
      interval: 10s
      retries: 5
    profiles:
      - data
      - catalog
    networks:
      - app_network

  basket-db:
    image: mongo:latest
    container_name: basket-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${BASKET_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${BASKET_DB_PASS}
      MONGO_INITDB_DATABASE: ${BASKET_DB_NAME}
    ports:
      - "${BASKET_DB_PORT_EXTERNAL}:${BASKET_DB_PORT_INTERNAL}"
    volumes:
      - basketdata:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - data
      - basket
    networks:
      - app_network

  inventory-db:
    image: mongo:latest
    container_name: inventory-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${INVENTORY_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${INVENTORY_DB_PASS}
      MONGO_INITDB_DATABASE: ${INVENTORY_DB_NAME}
    ports:
      - "${INVENTORY_DB_PORT_EXTERNAL}:${INVENTORY_DB_PORT_INTERNAL}"
    volumes:
      - inventorydata:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - data
      - inventory
    networks:
      - app_network


  logger-db:
    image: postgres:latest
    container_name: logger-db
    environment:
      POSTGRES_USER: ${LOGGER_DB_USER}
      POSTGRES_PASSWORD: ${LOGGER_DB_PASS}
      POSTGRES_DB: ${LOGGER_DB_NAME}
    ports:
      - "${LOGGER_DB_PORT_EXTERNAL}:${LOGGER_DB_PORT_INTERNAL}"
    volumes:
      - loggerdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LOGGER_DB_USER} -d ${LOGGER_DB_NAME}"]
      interval: 10s
      retries: 5
    profiles:
      - data
      - logger
    networks:
      - app_network
  
  order-db:
    image: postgres:latest
    container_name: order-db
    environment:
      POSTGRES_USER: ${ORDER_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_DB_PASS}
      POSTGRES_DB: ${ORDER_DB_NAME}
    ports:
      - "${ORDER_DB_PORT_EXTERNAL}:${ORDER_DB_PORT_INTERNAL}"
    volumes:
      - orderdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ORDER_DB_USER} -d ${ORDER_DB_NAME}"]
      interval: 10s
      retries: 5
    profiles:
      - data
      - order
    networks:
      - app_network


  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${EVENT_USER}
      RABBITMQ_DEFAULT_PASS: ${EVENT_PASS}
    ports:
      - "${EVENT_PORT_EXTERNAL}:${EVENT_PORT_INTERNAL}"       # RabbitMQ internal communication port
      - "${EVENT_MANAGEMENT_PORT}:${EVENT_MANAGEMENT_PORT}"     # Management UI internal communication port
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq/mnesia
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
    profiles:
      - event
      - data
    networks:
      - app_network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: ${KEYCLOAK_DB_HOST}
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASS}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASS}
    command: start-dev
    ports:
      - "${KEYCLOAK_API_PORT}:${KEYCLOAK_PORT}"
    depends_on:
      keycloak-db:
        condition: service_healthy
    profiles:
      - data
      - keycloak
    networks:
      - app_network

  catalog-api:
    build:
      context: .
      dockerfile: Catalog.API/Dockerfile
    container_name: catalog-api
    environment:
      DB_HOST: ${CATALOG_DB_HOST}
      DB_PORT: ${CATALOG_DB_PORT_INTERNAL} # Internal port for PostgreSQL
      DB_NAME: ${CATALOG_DB_NAME}
      DB_USER: ${CATALOG_DB_USER}
      DB_PASS: ${CATALOG_DB_PASS}
      EVENT_HOST: ${EVENT_HOST}
      EVENT_PORT: ${EVENT_PORT_INTERNAL} # Internal port for RabbitMQ
      EVENT_USER: ${EVENT_USER}
      EVENT_PASS: ${EVENT_PASS}
      SWAGGER_ENABLED: ${SWAGGER_ENABLED}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_PORT: ${KEYCLOAK_PORT}
      KEYCLOAK_API_URL: ${KEYCLOAK_API_URL}
      KEYCLOAK_API_PORT: ${KEYCLOAK_API_PORT}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_AUDIENCE: ${KEYCLOAK_AUDIENCE}
      KEYCLOAK_REQUIRE_HTTPS_METADATA: ${KEYCLOAK_REQUIRE_HTTPS_METADATA}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${CATALOG_API_PORT}:${CATALOG_PORT}" # API exposed externally
    depends_on:
      catalog-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    profiles:
      - apis
      - catalog
    networks:
      - app_network

  basket-api:
    build:
      context: .
      dockerfile: Basket.API/Dockerfile
    container_name: basket-api
    environment:
      DB_HOST: ${BASKET_DB_HOST}
      DB_PORT: ${BASKET_DB_PORT_INTERNAL} # Internal port for MongoDB
      DB_USER: ${BASKET_DB_USER}
      DB_PASS: ${BASKET_DB_PASS}
      DB_NAME: ${BASKET_DB_NAME}
      EVENT_HOST: ${EVENT_HOST}
      EVENT_PORT: ${EVENT_PORT_INTERNAL} # Internal port for RabbitMQ
      EVENT_USER: ${EVENT_USER}
      EVENT_PASS: ${EVENT_PASS}
      SWAGGER_ENABLED: ${SWAGGER_ENABLED}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_PORT: ${KEYCLOAK_PORT}
      KEYCLOAK_API_URL: ${KEYCLOAK_API_URL}
      KEYCLOAK_API_PORT: ${KEYCLOAK_API_PORT}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_AUDIENCE: ${KEYCLOAK_AUDIENCE}
      KEYCLOAK_REQUIRE_HTTPS_METADATA: ${KEYCLOAK_REQUIRE_HTTPS_METADATA}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${BASKET_API_PORT}:${BASKET_PORT}" # API exposed externally
    depends_on:
      basket-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    profiles:
      - apis
      - basket
    networks:
      - app_network

  inventory-api:
    build:
      context: .
      dockerfile: Inventory.API/Dockerfile
    container_name: inventory-api
    environment:
      DB_HOST: ${INVENTORY_DB_HOST}
      DB_PORT: ${INVENTORY_DB_PORT_INTERNAL} # Internal port for MongoDB
      DB_USER: ${INVENTORY_DB_USER}
      DB_PASS: ${INVENTORY_DB_PASS}
      DB_NAME: ${INVENTORY_DB_NAME}
      EVENT_HOST: ${EVENT_HOST}
      EVENT_PORT: ${EVENT_PORT_INTERNAL} # Internal port for RabbitMQ
      EVENT_USER: ${EVENT_USER}
      EVENT_PASS: ${EVENT_PASS}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_PORT: ${KEYCLOAK_PORT}
      KEYCLOAK_API_URL: ${KEYCLOAK_API_URL}
      KEYCLOAK_API_PORT: ${KEYCLOAK_API_PORT}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_AUDIENCE: ${KEYCLOAK_AUDIENCE}
      KEYCLOAK_REQUIRE_HTTPS_METADATA: ${KEYCLOAK_REQUIRE_HTTPS_METADATA}

      SWAGGER_ENABLED: ${SWAGGER_ENABLED}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${INVENTORY_API_PORT}:8080" # API exposed externally
    depends_on:
      inventory-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    profiles:
      - apis
      - inventory
    networks:
      - app_network

  logger-api:
    build:
      context: .
      dockerfile: Logger.API/Dockerfile
    container_name: logger-api
    environment:
      DB_HOST: ${LOGGER_DB_HOST}
      DB_PORT: ${LOGGER_DB_PORT_INTERNAL} # Internal port for PostgreSQL
      DB_NAME: ${LOGGER_DB_NAME}
      DB_USER: ${LOGGER_DB_USER}
      DB_PASS: ${LOGGER_DB_PASS}
      EVENT_HOST: ${EVENT_HOST}
      EVENT_PORT: ${EVENT_PORT_INTERNAL} # Internal port for RabbitMQ
      EVENT_USER: ${EVENT_USER}
      EVENT_PASS: ${EVENT_PASS}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_PORT: ${KEYCLOAK_PORT}
      KEYCLOAK_API_URL: ${KEYCLOAK_API_URL}
      KEYCLOAK_API_PORT: ${KEYCLOAK_API_PORT}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_AUDIENCE: ${KEYCLOAK_AUDIENCE}
      KEYCLOAK_REQUIRE_HTTPS_METADATA: ${KEYCLOAK_REQUIRE_HTTPS_METADATA}

      SWAGGER_ENABLED: ${SWAGGER_ENABLED}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${LOGGER_API_PORT}:8080" # API exposed externally
    depends_on:
      logger-db:
        condition: service_healthy
    profiles:
      - apis
      - logger
    networks:
      - app_network

  order-api:
    build:
      context: .
      dockerfile: Order.API/Dockerfile
    container_name: order-api
    environment:
      DB_HOST: ${ORDER_DB_HOST}
      DB_PORT: ${ORDER_DB_PORT_INTERNAL} # Internal port for MongoDB
      DB_USER: ${ORDER_DB_USER}
      DB_PASS: ${ORDER_DB_PASS}
      DB_NAME: ${ORDER_DB_NAME}
      EVENT_HOST: ${EVENT_HOST}
      EVENT_PORT: ${EVENT_PORT_INTERNAL} # Internal port for RabbitMQ
      EVENT_USER: ${EVENT_USER}
      EVENT_PASS: ${EVENT_PASS}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_PORT: ${KEYCLOAK_PORT}
      KEYCLOAK_API_URL: ${KEYCLOAK_API_URL}
      KEYCLOAK_API_PORT: ${KEYCLOAK_API_PORT}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_AUDIENCE: ${KEYCLOAK_AUDIENCE}
      KEYCLOAK_REQUIRE_HTTPS_METADATA: ${KEYCLOAK_REQUIRE_HTTPS_METADATA}

      SWAGGER_ENABLED: ${SWAGGER_ENABLED}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${ORDER_API_PORT}:8080" # API exposed externally
    depends_on:
      order-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    profiles:
      - apis
      - order
    networks:
      - app_network


  

volumes:
  catalogdata:
  identitydata:
  basketdata:
  inventorydata:
  loggerdata:
  orderdata:
  rabbitmqdata:
  keycloak_data:

networks:
  app_network:
    driver: bridge

